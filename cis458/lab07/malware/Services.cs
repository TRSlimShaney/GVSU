using System;
using System.Threading;
using System.Diagnostics;
using System.Net.Sockets;
using Framework;
using static Framework.Logger;
using static Framework.Utilities;
using static Framework.Statuses;


namespace lab07
{

    public class Services
    {
        const string name = "Services";

        public Services()
        {

        }

        public void StartProcess(StartProcessRequest req, TcpClient client)
        {
            const string routine = "StartProcess";
            Entering(name, routine);

            var t = new Process();
            t.StartInfo.FileName = req.FileName;
            t.StartInfo.Arguments = req.Arguments;
            t.StartInfo.CreateNoWindow = true;
            t.Start();

            while (!t.HasExited) {}

            var rsp = new StartProcessResponse();
            rsp.Status = STA_NORMAL;;
            rsp.StdOutput = t.StandardOutput.ToString();
            rsp.StdError = t.StandardError.ToString();
            IPC.SendResponse(client, rsp);
        }

        public void KillProcess(KillProcessRequest req, TcpClient client)
        {
            const string routine = "KillProcess";
            Entering(name, routine);

            var p = Process.GetProcessById(req.Id);
            p.Kill();
            IPC.SendResponse(client, new BasicResponse());
        }
    }
}