using System;
using System.Threading;
using System.Collections.Generic;
using Framework;
using static Framework.Utilities;
using static Framework.Logger;

namespace lab07
{

    public class Switch
    {
        const string name = "Switch";
        Queue<IncomingRequest> queue;
        Services services = new Services();

        public Switch(Queue<IncomingRequest> queue)
        {
            this.queue = queue;
        }

        public void ProcessMessages()
        {
            const string routine = "ProcessMessages";
            Entering(name, routine);

            while (true)
            {
                if (IsGreaterThan(queue.Count, 0))
                {
                    var pst = new ParameterizedThreadStart(ServiceSwitch);
                    var t = new Thread(pst);
                    t.Start(queue.Dequeue());
                }
                else
                {
                    Thread.Sleep(10);
                }
            }
        }

        public void ServiceSwitch(object obj)
        {
            const string routine = "ServiceSwitch";
            Entering(name, routine);
            
            var req = (IncomingRequest) obj;
            var client = req.client;
            var json = req.msg;
            var basicparse = FromJson<BasicRequest>(json);

            switch (basicparse.Route)
            {
                case Routes.StartProcessRoute:
                    services.StartProcess(FromJson<StartProcessRequest>(json), client);
                    break;
                case Routes.KillProcessRoute:
                    services.KillProcess(FromJson<KillProcessRequest>(json), client);
                    break;
                default:
                    Error(name, routine, $"No service for route {basicparse.Route}.");
                    break;
            }
        }
    }
}